# src/storm/core/middleware_pipeline.py

from storm.core.middleware import Middleware

class MiddlewarePipeline:
    """
    Manages the execution of middleware in sequence for each request and response.
    """
    def __init__(self, middleware_list):
        """
        Initializes the middleware pipeline.

        :param middleware_list: A list of middleware classes to be executed
        """
        self.middleware_list = middleware_list

    async def execute(self, request, handler):
        """
        Executes the request through the middleware pipeline.

        :param request: The incoming HTTP request
        :param handler: The final handler function to process the request
        :return: The response after processing
        """
        return await self._execute_request_middleware(request, handler)

    async def _execute_request_middleware(self, request, handler):
        if not self.middleware_list:
            return await handler(request)

        current_middleware = self.middleware_list[0]
        remaining_middleware = self.middleware_list[1:]

        async def next_handler(req):
            next_pipeline = MiddlewarePipeline(remaining_middleware)
            return await next_pipeline.execute(req, handler)

        return await current_middleware.process_request(request, next_handler)

    async def _execute_response_middleware(self, response):
        """
        Executes the response through the middleware pipeline.

        :param response: The response generated by the handler
        :return: The final processed response
        """
        for middleware in reversed(self.middleware_list):
            response = await middleware.process_response(response)
        return response
